usage: typo <secret> [--file=<file>] [--output-file=<output-file>]
            [--format=hex|base64] [--password[=<password>]]
            [--authenticated] [--nosalt]
            [--markup] [--deterministic]
            [--rulesets=<ruleset>[,...]] [--ruleset-file=<ruleset-file>]
            [--keyboard-file=<keyboard-file>]
            [--dictionary-file=<dictionary-file>]
            [--highlight=<highlight>]
            [--verbose]
       typo --decode --original-file=<original-file>
            [--file=<file>] [--output-file=<output-file>]
            [--format=hex|base64] [--password[=<password>]]
            [--authenticated] [--nosalt]
            [--markup]
            [--verbose]
       typo --help
       typo --version
       typo --license
       typo --view-source

These are the options:

  <secret>
      The secret you want to encode.

  --file=<file>, -f <file>
      The input file for encoding or decoding.

      If not specified, the program reads from standard input.

  --output-file=<output-file>, -o <output-file>
      The file to which the modified text should be saved.

      If not specified, the program writes to standard output.

  --format=hex|base64
      How to interpret the secret for encoding or how to format it for output
      after decoding.

      By default the secret is treated as a regular string. If format is hex,
      the secret is treated as the hexadecimal representation of a binary file.
      If it is base64, the secret is treated as the Base64 representation of a
      binary file.

  --password[=<password>], -P
      The password used for encrypting the secret before encoding or for
      decrypting the secret after decoding.

  --authenticated, -a
      Use authenticated encryption.

      This uses GCM mode.

  --nosalt
      Do not use any salt for encryption.

      By default the original text is used as the salt. If the original text is
      lost or corrupted in any way, it is impossible to recover the secret.
      With this option set only the password is used for encryption.

  --decode, -d
      Decode instead of encoding.

  --original-file=<original-file>, -g <original-file>
      The original file before any typos were introduced.

      It should be possible to 'reconstruct' this file simply by correcting the
      typos, either manually or using a spellchecker.

  --markup
      Include markup ('{[s/.../.../]}') in the output while encoding, or parse
      markup in the input while decoding.

  --deterministic
      Do not use randomization in the encoding process.

      With this option set, the same input will always give the same output.

  --rulesets=<ruleset>[,...]
      A comma-separated list of built-in rulesets to use for typo generation.

      The following built-in rulesets are available:

       *  keyboard: Auto-generated typing errors based on the selected keyboard
          layout (QWERTY by default)

       *  misspelling: Common misspellings

       *  grammatical: Grammar and punctuation errors

      The default is 'keyboard, misspelling, grammatical'.

  --ruleset-file=<ruleset-file>
      The ruleset file to use for typo generation.

      This is a file containing tab-separated values. Each row is a rule. The
      first field is the word pattern to match, the second field is the
      replacement text.

      If this is specified, the options '--rulesets', '--keyboard-file', and
      '--dictionary-file' have no significance.

  --keyboard-file=<keyboard-file>
      The keyboard file to use for typo generation.

      By default the program uses a standard QWERTY layout:

        1234567890-= 
        QWERTYUIOP[]\
        ASDFGHJKL;'  
        ZXCVBNM,./   

      You can use this option to specify your own layout.

  --dictionary-file=<dictionary-file>
      The dictionary file to use for typo generation.

      This is a file containing the most common words in the language,
      appearing one word per line.

      The dictionary is used to evaluate the plausibility of a keyboard-based
      typing error. If a trigram (three-letter sequence) appears more
      frequently in the dictionary, it is considered more likely to appear in a
      mistyped word.

      The default built-in dictionary contains about 1,500 words of the English
      language.

  --highlight=<highlight>
      How to highlight the typos.

      The value must be of the format
      '<color>[ <background-color>[ text-style]]'. e.g. 'white red bold'

      The following colors are supported: black, red, green, yellow, blue,
      magenta, cyan, white, and gray (also grey).

      The following text styles are supported: bold, dim, italic, underline,
      inverse, hidden, and strikethrough.

  --verbose, -v
      Verbose mode.

  --help, -h, -?
      Print help.

  --version, -V
      Display version information.

  --license
      Show license.

  --view-source
      Display the program's source code.

Examples:

  (1)   typo '4pm Pier39' --file=email.txt > email.typo.txt

      Hide the message '4pm Pier39' in the text of email.txt by introducing
      typographical errors, and save the output to email.typo.txt.

  (2)   typo 57F8965374611F9CEEF9578BFBDC955CE6B74303 --format=hex < hello.txt

      Encode the PGP key fingerprint (20 bytes) into the text of hello.txt and
      print the output to the console.

  (3)   typo --decode --file=change.txt --original-file=hope.txt

      Extract secret information from typos in change.txt using hope.txt as the
      original file.

  (4)   typo --format=base64 $(base64 heart.png) < love-letter.txt | pbcopy

      Encode the contents of heart.png into the text of love-letter.txt and
      copy the result to the clipboard.

  (5)   typo --decode --original-file=top-secret.txt --password=0000 < file.txt

      Extract top secret information from file.txt using the password '0000'.

-- 
http://mjethani.github.io/typo
